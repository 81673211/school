<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.school.biz.dao.user.AdminUserMapper" >
  <resultMap id="BaseResultMap" type="com.school.biz.domain.entity.user.AdminUser" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="login_name" property="loginName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="admin_name" property="adminName" jdbcType="VARCHAR" />
    <result column="admin_phone" property="adminPhone" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, login_name, password, admin_name, admin_phone, role_id, version, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from admin_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from admin_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.school.biz.domain.entity.user.AdminUser" >
    insert into admin_user (id, login_name, password, 
      admin_name, admin_phone, role_id, 
      version, status)
    values (#{id,jdbcType=BIGINT}, #{loginName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{adminName,jdbcType=VARCHAR}, #{adminPhone,jdbcType=VARCHAR}, #{roleId,jdbcType=BIGINT}, 
      #{version,jdbcType=INTEGER}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.school.biz.domain.entity.user.AdminUser" >
    insert into admin_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="loginName != null" >
        login_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="adminName != null" >
        admin_name,
      </if>
      <if test="adminPhone != null" >
        admin_phone,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="loginName != null" >
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="adminName != null" >
        #{adminName,jdbcType=VARCHAR},
      </if>
      <if test="adminPhone != null" >
        #{adminPhone,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.school.biz.domain.entity.user.AdminUser" >
    update admin_user
    <set >
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="adminName != null" >
        admin_name = #{adminName,jdbcType=VARCHAR},
      </if>
      <if test="adminPhone != null" >
        admin_phone = #{adminPhone,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.school.biz.domain.entity.user.AdminUser" >
    update admin_user
    set login_name = #{loginName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      admin_name = #{adminName,jdbcType=VARCHAR},
      admin_phone = #{adminPhone,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=BIGINT},
      version = #{version,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="getLoginUserByLoginNameAndLoginPassword" parameterType="map" resultType="com.school.biz.domain.entity.user.AdminUser">
  	select au.* from admin_user au
  	where au.login_name = #{userName} and au.password = #{password}
  </select>
  
  <select id="queryPage" resultType="com.school.biz.domain.entity.user.AdminUserVo" parameterType="map">
		select au.id,au.login_name,au.admin_name,au.admin_phone,au.role_id,au.version,au.status,r.role_name from admin_user au
		LEFT JOIN role r on au.role_id = r.id
		<where>
			<if test="status != null and status != '' ">
				and au.status = #{status}
			</if>
			<if test="roleId != null and roleId != '' ">
				and au.role_id = #{roleId}
			</if>
			<if test="keyword != null and keyword != '' ">
				and (au.login_name like concat('%',#{keyword},'%')
					 or au.admin_name like concat('%',#{keyword},'%')
					 or au.admin_phone like concat('%',#{keyword},'%'))
			</if>
		</where>
		ORDER BY au.id asc
	</select>
	
	<select id="detail" resultType="com.school.biz.domain.entity.user.AdminUserVo" parameterType="java.lang.Long">
		select au.id,au.login_name,au.admin_name,au.admin_phone,au.role_id,au.version,au.status,r.role_name from admin_user au
		LEFT JOIN role r on au.role_id = r.id
		where au.id = #{id}
	</select>
	
	<select id="checkIsNotExist" parameterType="java.lang.String" resultType="java.lang.Boolean">
		select IF(count(1)>0,0,1)
		from admin_user au
		where au.login_name = #{loginName}
	</select>
	
	<select id="findByLoginName" parameterType="java.lang.String" resultType="com.school.biz.domain.entity.user.AdminUser">
		select au.id,au.login_name,au.admin_name,au.admin_phone,au.role_id,au.version,au.status from admin_user au
		where au.login_name = #{loginName}
	</select>
</mapper>