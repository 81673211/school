<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<!-- 目前暂不需要 dubbo.properties-->
		<property name="locations">
			<list>
				<value>classpath*:config/redis.development.properties</value>
				<value>classpath*:config/jdbc.development.properties</value> 
			</list>
		</property>
	</bean>
	<!--阿里巴巴druid,高效、功能强大、可扩展性好,便于sql监控分析 -->
	<bean id="mysqlDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
	<property name="url" value="${jdbc.url}" />  
			<property name="username" value="${jdbc.username}" />  
			<property name="password" value="${jdbc.password}" />  
			<!-- 配置初始化大小、最小、最大 -->
		    <property name="initialSize" value="5" />
		    <property name="minIdle" value="5" />
		    <property name="maxActive" value="20" />
		    <!-- 配置获取连接等待超时的时间 -->
		    <property name="maxWait" value="60000" />
		    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		    <property name="timeBetweenEvictionRunsMillis" value="3000" />
		    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		    <property name="minEvictableIdleTimeMillis" value="300000" />
		
		    <property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		    <property name="testWhileIdle" value="true" />
		    <property name="testOnBorrow" value="false" />
		    <property name="testOnReturn" value="false" />
		
		    <!--打开PSCache，并且指定每个连接上PSCache的大小 ，Oracle，把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false-->
		    <property name="poolPreparedStatements" value="false" />
		    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		    <!-- 开启Druid的监控统计功能 -->
		    <property name="filters" value="stat,config" />
		    <!-- 开启数据库密码解密-->
		    <property name="connectionProperties" value="config.decrypt=${jdbc.decrypt};config.decrypt.key=${jdbc.publickey}" />  
			
			
	</bean>
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<!-- 目前暂不需要 dubbo.properties <property name="locations"> <list> 标准配置 <value>classpath*:config/dubbo.properties</value> 
			</list> </property> -->
	</bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.school" />

	<!-- MyBatis 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mysqlDataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mysqlDataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.school.entity" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:com/school/dao/**/*Mapper.xml" />
	</bean>

	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="basePackage" value="com.school.dao" />
	</bean>

	<!-- MyBatis sessionTemplate注册 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- 启用Aop AspectJ注解 -->

	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->

</beans>